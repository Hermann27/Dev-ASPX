'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.1
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="BD_03")>  _
Partial Public Class DCDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertEnseignant(instance As Enseignant)
    End Sub
  Partial Private Sub UpdateEnseignant(instance As Enseignant)
    End Sub
  Partial Private Sub DeleteEnseignant(instance As Enseignant)
    End Sub
  Partial Private Sub InsertSpecialite(instance As Specialite)
    End Sub
  Partial Private Sub UpdateSpecialite(instance As Specialite)
    End Sub
  Partial Private Sub DeleteSpecialite(instance As Specialite)
    End Sub
  Partial Private Sub InsertEtudiant(instance As Etudiant)
    End Sub
  Partial Private Sub UpdateEtudiant(instance As Etudiant)
    End Sub
  Partial Private Sub DeleteEtudiant(instance As Etudiant)
    End Sub
  Partial Private Sub InsertEvaluation(instance As Evaluation)
    End Sub
  Partial Private Sub UpdateEvaluation(instance As Evaluation)
    End Sub
  Partial Private Sub DeleteEvaluation(instance As Evaluation)
    End Sub
  Partial Private Sub InsertFichier(instance As Fichier)
    End Sub
  Partial Private Sub UpdateFichier(instance As Fichier)
    End Sub
  Partial Private Sub DeleteFichier(instance As Fichier)
    End Sub
  Partial Private Sub InsertFiliere(instance As Filiere)
    End Sub
  Partial Private Sub UpdateFiliere(instance As Filiere)
    End Sub
  Partial Private Sub DeleteFiliere(instance As Filiere)
    End Sub
  Partial Private Sub InsertMatiere(instance As Matiere)
    End Sub
  Partial Private Sub UpdateMatiere(instance As Matiere)
    End Sub
  Partial Private Sub DeleteMatiere(instance As Matiere)
    End Sub
  Partial Private Sub InsertNote(instance As Note)
    End Sub
  Partial Private Sub UpdateNote(instance As Note)
    End Sub
  Partial Private Sub DeleteNote(instance As Note)
    End Sub
  Partial Private Sub InsertPersonne(instance As Personne)
    End Sub
  Partial Private Sub UpdatePersonne(instance As Personne)
    End Sub
  Partial Private Sub DeletePersonne(instance As Personne)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("BD_03ConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Enseignants() As System.Data.Linq.Table(Of Enseignant)
		Get
			Return Me.GetTable(Of Enseignant)
		End Get
	End Property
	
	Public ReadOnly Property Specialites() As System.Data.Linq.Table(Of Specialite)
		Get
			Return Me.GetTable(Of Specialite)
		End Get
	End Property
	
	Public ReadOnly Property Etudiants() As System.Data.Linq.Table(Of Etudiant)
		Get
			Return Me.GetTable(Of Etudiant)
		End Get
	End Property
	
	Public ReadOnly Property Evaluations() As System.Data.Linq.Table(Of Evaluation)
		Get
			Return Me.GetTable(Of Evaluation)
		End Get
	End Property
	
	Public ReadOnly Property Fichiers() As System.Data.Linq.Table(Of Fichier)
		Get
			Return Me.GetTable(Of Fichier)
		End Get
	End Property
	
	Public ReadOnly Property Filieres() As System.Data.Linq.Table(Of Filiere)
		Get
			Return Me.GetTable(Of Filiere)
		End Get
	End Property
	
	Public ReadOnly Property Matieres() As System.Data.Linq.Table(Of Matiere)
		Get
			Return Me.GetTable(Of Matiere)
		End Get
	End Property
	
	Public ReadOnly Property Notes() As System.Data.Linq.Table(Of Note)
		Get
			Return Me.GetTable(Of Note)
		End Get
	End Property
	
	Public ReadOnly Property Personnes() As System.Data.Linq.Table(Of Personne)
		Get
			Return Me.GetTable(Of Personne)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Enseignant")>  _
Partial Public Class Enseignant
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id_Personne As Integer
	
	Private _Annee As String
	
	Private _Id_Specialite As Integer
	
	Private _Id As Integer
	
	Private _Evaluations As EntitySet(Of Evaluation)
	
	Private _Matieres As EntitySet(Of Matiere)
	
	Private _Specialite As EntityRef(Of Specialite)
	
	Private _Personne As EntityRef(Of Personne)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnId_PersonneChanging(value As Integer)
    End Sub
    Partial Private Sub OnId_PersonneChanged()
    End Sub
    Partial Private Sub OnAnneeChanging(value As String)
    End Sub
    Partial Private Sub OnAnneeChanged()
    End Sub
    Partial Private Sub OnId_SpecialiteChanging(value As Integer)
    End Sub
    Partial Private Sub OnId_SpecialiteChanged()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Evaluations = New EntitySet(Of Evaluation)(AddressOf Me.attach_Evaluations, AddressOf Me.detach_Evaluations)
		Me._Matieres = New EntitySet(Of Matiere)(AddressOf Me.attach_Matieres, AddressOf Me.detach_Matieres)
		Me._Specialite = CType(Nothing, EntityRef(Of Specialite))
		Me._Personne = CType(Nothing, EntityRef(Of Personne))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id_Personne", DbType:="Int NOT NULL")>  _
	Public Property Id_Personne() As Integer
		Get
			Return Me._Id_Personne
		End Get
		Set
			If ((Me._Id_Personne = value)  _
						= false) Then
				If Me._Personne.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnId_PersonneChanging(value)
				Me.SendPropertyChanging
				Me._Id_Personne = value
				Me.SendPropertyChanged("Id_Personne")
				Me.OnId_PersonneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Annee", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Annee() As String
		Get
			Return Me._Annee
		End Get
		Set
			If (String.Equals(Me._Annee, value) = false) Then
				Me.OnAnneeChanging(value)
				Me.SendPropertyChanging
				Me._Annee = value
				Me.SendPropertyChanged("Annee")
				Me.OnAnneeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id_Specialite", DbType:="Int NOT NULL")>  _
	Public Property Id_Specialite() As Integer
		Get
			Return Me._Id_Specialite
		End Get
		Set
			If ((Me._Id_Specialite = value)  _
						= false) Then
				If Me._Specialite.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnId_SpecialiteChanging(value)
				Me.SendPropertyChanging
				Me._Id_Specialite = value
				Me.SendPropertyChanged("Id_Specialite")
				Me.OnId_SpecialiteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Enseignant_Evaluation", Storage:="_Evaluations", ThisKey:="Id", OtherKey:="Id_Enseignant")>  _
	Public Property Evaluations() As EntitySet(Of Evaluation)
		Get
			Return Me._Evaluations
		End Get
		Set
			Me._Evaluations.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Enseignant_Matiere", Storage:="_Matieres", ThisKey:="Id", OtherKey:="Id_Enseignant")>  _
	Public Property Matieres() As EntitySet(Of Matiere)
		Get
			Return Me._Matieres
		End Get
		Set
			Me._Matieres.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Specialite_Enseignant", Storage:="_Specialite", ThisKey:="Id_Specialite", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Specialite() As Specialite
		Get
			Return Me._Specialite.Entity
		End Get
		Set
			Dim previousValue As Specialite = Me._Specialite.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Specialite.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Specialite.Entity = Nothing
					previousValue.Enseignants.Remove(Me)
				End If
				Me._Specialite.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Enseignants.Add(Me)
					Me._Id_Specialite = value.Id
				Else
					Me._Id_Specialite = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Specialite")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personne_Enseignant", Storage:="_Personne", ThisKey:="Id_Personne", OtherKey:="Id", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property Personne() As Personne
		Get
			Return Me._Personne.Entity
		End Get
		Set
			Dim previousValue As Personne = Me._Personne.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personne.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personne.Entity = Nothing
					previousValue.Enseignants.Remove(Me)
				End If
				Me._Personne.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Enseignants.Add(Me)
					Me._Id_Personne = value.Id
				Else
					Me._Id_Personne = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personne")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Evaluations(ByVal entity As Evaluation)
		Me.SendPropertyChanging
		entity.Enseignant = Me
	End Sub
	
	Private Sub detach_Evaluations(ByVal entity As Evaluation)
		Me.SendPropertyChanging
		entity.Enseignant = Nothing
	End Sub
	
	Private Sub attach_Matieres(ByVal entity As Matiere)
		Me.SendPropertyChanging
		entity.Enseignant = Me
	End Sub
	
	Private Sub detach_Matieres(ByVal entity As Matiere)
		Me.SendPropertyChanging
		entity.Enseignant = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Specialite")>  _
Partial Public Class Specialite
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Nom As String
	
	Private _Effectif As Integer
	
	Private _Id_Filiere As Integer
	
	Private _Enseignants As EntitySet(Of Enseignant)
	
	Private _Etudiants As EntitySet(Of Etudiant)
	
	Private _Fichiers As EntitySet(Of Fichier)
	
	Private _Filiere As EntityRef(Of Filiere)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNomChanging(value As String)
    End Sub
    Partial Private Sub OnNomChanged()
    End Sub
    Partial Private Sub OnEffectifChanging(value As Integer)
    End Sub
    Partial Private Sub OnEffectifChanged()
    End Sub
    Partial Private Sub OnId_FiliereChanging(value As Integer)
    End Sub
    Partial Private Sub OnId_FiliereChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Enseignants = New EntitySet(Of Enseignant)(AddressOf Me.attach_Enseignants, AddressOf Me.detach_Enseignants)
		Me._Etudiants = New EntitySet(Of Etudiant)(AddressOf Me.attach_Etudiants, AddressOf Me.detach_Etudiants)
		Me._Fichiers = New EntitySet(Of Fichier)(AddressOf Me.attach_Fichiers, AddressOf Me.detach_Fichiers)
		Me._Filiere = CType(Nothing, EntityRef(Of Filiere))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nom", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Nom() As String
		Get
			Return Me._Nom
		End Get
		Set
			If (String.Equals(Me._Nom, value) = false) Then
				Me.OnNomChanging(value)
				Me.SendPropertyChanging
				Me._Nom = value
				Me.SendPropertyChanged("Nom")
				Me.OnNomChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Effectif", DbType:="Int NOT NULL")>  _
	Public Property Effectif() As Integer
		Get
			Return Me._Effectif
		End Get
		Set
			If ((Me._Effectif = value)  _
						= false) Then
				Me.OnEffectifChanging(value)
				Me.SendPropertyChanging
				Me._Effectif = value
				Me.SendPropertyChanged("Effectif")
				Me.OnEffectifChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id_Filiere", DbType:="Int NOT NULL")>  _
	Public Property Id_Filiere() As Integer
		Get
			Return Me._Id_Filiere
		End Get
		Set
			If ((Me._Id_Filiere = value)  _
						= false) Then
				If Me._Filiere.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnId_FiliereChanging(value)
				Me.SendPropertyChanging
				Me._Id_Filiere = value
				Me.SendPropertyChanged("Id_Filiere")
				Me.OnId_FiliereChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Specialite_Enseignant", Storage:="_Enseignants", ThisKey:="Id", OtherKey:="Id_Specialite")>  _
	Public Property Enseignants() As EntitySet(Of Enseignant)
		Get
			Return Me._Enseignants
		End Get
		Set
			Me._Enseignants.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Specialite_Etudiant", Storage:="_Etudiants", ThisKey:="Id", OtherKey:="Id_Specialite")>  _
	Public Property Etudiants() As EntitySet(Of Etudiant)
		Get
			Return Me._Etudiants
		End Get
		Set
			Me._Etudiants.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Specialite_Fichier", Storage:="_Fichiers", ThisKey:="Id", OtherKey:="Id_Specialite")>  _
	Public Property Fichiers() As EntitySet(Of Fichier)
		Get
			Return Me._Fichiers
		End Get
		Set
			Me._Fichiers.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Filiere_Specialite", Storage:="_Filiere", ThisKey:="Id_Filiere", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Filiere() As Filiere
		Get
			Return Me._Filiere.Entity
		End Get
		Set
			Dim previousValue As Filiere = Me._Filiere.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Filiere.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Filiere.Entity = Nothing
					previousValue.Specialites.Remove(Me)
				End If
				Me._Filiere.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Specialites.Add(Me)
					Me._Id_Filiere = value.Id
				Else
					Me._Id_Filiere = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Filiere")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Enseignants(ByVal entity As Enseignant)
		Me.SendPropertyChanging
		entity.Specialite = Me
	End Sub
	
	Private Sub detach_Enseignants(ByVal entity As Enseignant)
		Me.SendPropertyChanging
		entity.Specialite = Nothing
	End Sub
	
	Private Sub attach_Etudiants(ByVal entity As Etudiant)
		Me.SendPropertyChanging
		entity.Specialite = Me
	End Sub
	
	Private Sub detach_Etudiants(ByVal entity As Etudiant)
		Me.SendPropertyChanging
		entity.Specialite = Nothing
	End Sub
	
	Private Sub attach_Fichiers(ByVal entity As Fichier)
		Me.SendPropertyChanging
		entity.Specialite = Me
	End Sub
	
	Private Sub detach_Fichiers(ByVal entity As Fichier)
		Me.SendPropertyChanging
		entity.Specialite = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Etudiant")>  _
Partial Public Class Etudiant
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Id_Personne As Integer
	
	Private _Annee As String
	
	Private _Id_Specialite As Integer
	
	Private _Niveau As System.Nullable(Of Integer)
	
	Private _Evaluations As EntitySet(Of Evaluation)
	
	Private _Notes As EntitySet(Of Note)
	
	Private _Specialite As EntityRef(Of Specialite)
	
	Private _Personne As EntityRef(Of Personne)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnId_PersonneChanging(value As Integer)
    End Sub
    Partial Private Sub OnId_PersonneChanged()
    End Sub
    Partial Private Sub OnAnneeChanging(value As String)
    End Sub
    Partial Private Sub OnAnneeChanged()
    End Sub
    Partial Private Sub OnId_SpecialiteChanging(value As Integer)
    End Sub
    Partial Private Sub OnId_SpecialiteChanged()
    End Sub
    Partial Private Sub OnNiveauChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNiveauChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Evaluations = New EntitySet(Of Evaluation)(AddressOf Me.attach_Evaluations, AddressOf Me.detach_Evaluations)
		Me._Notes = New EntitySet(Of Note)(AddressOf Me.attach_Notes, AddressOf Me.detach_Notes)
		Me._Specialite = CType(Nothing, EntityRef(Of Specialite))
		Me._Personne = CType(Nothing, EntityRef(Of Personne))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id_Personne", DbType:="Int NOT NULL")>  _
	Public Property Id_Personne() As Integer
		Get
			Return Me._Id_Personne
		End Get
		Set
			If ((Me._Id_Personne = value)  _
						= false) Then
				If Me._Personne.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnId_PersonneChanging(value)
				Me.SendPropertyChanging
				Me._Id_Personne = value
				Me.SendPropertyChanged("Id_Personne")
				Me.OnId_PersonneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Annee", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Annee() As String
		Get
			Return Me._Annee
		End Get
		Set
			If (String.Equals(Me._Annee, value) = false) Then
				Me.OnAnneeChanging(value)
				Me.SendPropertyChanging
				Me._Annee = value
				Me.SendPropertyChanged("Annee")
				Me.OnAnneeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id_Specialite", DbType:="Int NOT NULL")>  _
	Public Property Id_Specialite() As Integer
		Get
			Return Me._Id_Specialite
		End Get
		Set
			If ((Me._Id_Specialite = value)  _
						= false) Then
				If Me._Specialite.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnId_SpecialiteChanging(value)
				Me.SendPropertyChanging
				Me._Id_Specialite = value
				Me.SendPropertyChanged("Id_Specialite")
				Me.OnId_SpecialiteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Niveau", DbType:="Int")>  _
	Public Property Niveau() As System.Nullable(Of Integer)
		Get
			Return Me._Niveau
		End Get
		Set
			If (Me._Niveau.Equals(value) = false) Then
				Me.OnNiveauChanging(value)
				Me.SendPropertyChanging
				Me._Niveau = value
				Me.SendPropertyChanged("Niveau")
				Me.OnNiveauChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Etudiant_Evaluation", Storage:="_Evaluations", ThisKey:="Id", OtherKey:="Id_Etudiant")>  _
	Public Property Evaluations() As EntitySet(Of Evaluation)
		Get
			Return Me._Evaluations
		End Get
		Set
			Me._Evaluations.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Etudiant_Note", Storage:="_Notes", ThisKey:="Id", OtherKey:="Id_Etudiant")>  _
	Public Property Notes() As EntitySet(Of Note)
		Get
			Return Me._Notes
		End Get
		Set
			Me._Notes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Specialite_Etudiant", Storage:="_Specialite", ThisKey:="Id_Specialite", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Specialite() As Specialite
		Get
			Return Me._Specialite.Entity
		End Get
		Set
			Dim previousValue As Specialite = Me._Specialite.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Specialite.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Specialite.Entity = Nothing
					previousValue.Etudiants.Remove(Me)
				End If
				Me._Specialite.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Etudiants.Add(Me)
					Me._Id_Specialite = value.Id
				Else
					Me._Id_Specialite = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Specialite")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personne_Etudiant", Storage:="_Personne", ThisKey:="Id_Personne", OtherKey:="Id", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property Personne() As Personne
		Get
			Return Me._Personne.Entity
		End Get
		Set
			Dim previousValue As Personne = Me._Personne.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Personne.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Personne.Entity = Nothing
					previousValue.Etudiants.Remove(Me)
				End If
				Me._Personne.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Etudiants.Add(Me)
					Me._Id_Personne = value.Id
				Else
					Me._Id_Personne = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Personne")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Evaluations(ByVal entity As Evaluation)
		Me.SendPropertyChanging
		entity.Etudiant = Me
	End Sub
	
	Private Sub detach_Evaluations(ByVal entity As Evaluation)
		Me.SendPropertyChanging
		entity.Etudiant = Nothing
	End Sub
	
	Private Sub attach_Notes(ByVal entity As Note)
		Me.SendPropertyChanging
		entity.Etudiant = Me
	End Sub
	
	Private Sub detach_Notes(ByVal entity As Note)
		Me.SendPropertyChanging
		entity.Etudiant = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Evaluation")>  _
Partial Public Class Evaluation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id_Etudiant As Integer
	
	Private _Id_Enseignant As Integer
	
	Private _Texte As String
	
	Private _Mention As String
	
	Private _Date_Evaluation As Date
	
	Private _Enseignant As EntityRef(Of Enseignant)
	
	Private _Etudiant As EntityRef(Of Etudiant)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnId_EtudiantChanging(value As Integer)
    End Sub
    Partial Private Sub OnId_EtudiantChanged()
    End Sub
    Partial Private Sub OnId_EnseignantChanging(value As Integer)
    End Sub
    Partial Private Sub OnId_EnseignantChanged()
    End Sub
    Partial Private Sub OnTexteChanging(value As String)
    End Sub
    Partial Private Sub OnTexteChanged()
    End Sub
    Partial Private Sub OnMentionChanging(value As String)
    End Sub
    Partial Private Sub OnMentionChanged()
    End Sub
    Partial Private Sub OnDate_EvaluationChanging(value As Date)
    End Sub
    Partial Private Sub OnDate_EvaluationChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Enseignant = CType(Nothing, EntityRef(Of Enseignant))
		Me._Etudiant = CType(Nothing, EntityRef(Of Etudiant))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id_Etudiant", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Id_Etudiant() As Integer
		Get
			Return Me._Id_Etudiant
		End Get
		Set
			If ((Me._Id_Etudiant = value)  _
						= false) Then
				If Me._Etudiant.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnId_EtudiantChanging(value)
				Me.SendPropertyChanging
				Me._Id_Etudiant = value
				Me.SendPropertyChanged("Id_Etudiant")
				Me.OnId_EtudiantChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id_Enseignant", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Id_Enseignant() As Integer
		Get
			Return Me._Id_Enseignant
		End Get
		Set
			If ((Me._Id_Enseignant = value)  _
						= false) Then
				If Me._Enseignant.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnId_EnseignantChanging(value)
				Me.SendPropertyChanging
				Me._Id_Enseignant = value
				Me.SendPropertyChanged("Id_Enseignant")
				Me.OnId_EnseignantChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Texte", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Texte() As String
		Get
			Return Me._Texte
		End Get
		Set
			If (String.Equals(Me._Texte, value) = false) Then
				Me.OnTexteChanging(value)
				Me.SendPropertyChanging
				Me._Texte = value
				Me.SendPropertyChanged("Texte")
				Me.OnTexteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mention", DbType:="NVarChar(50)")>  _
	Public Property Mention() As String
		Get
			Return Me._Mention
		End Get
		Set
			If (String.Equals(Me._Mention, value) = false) Then
				Me.OnMentionChanging(value)
				Me.SendPropertyChanging
				Me._Mention = value
				Me.SendPropertyChanged("Mention")
				Me.OnMentionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Date_Evaluation", DbType:="DateTime NOT NULL")>  _
	Public Property Date_Evaluation() As Date
		Get
			Return Me._Date_Evaluation
		End Get
		Set
			If ((Me._Date_Evaluation = value)  _
						= false) Then
				Me.OnDate_EvaluationChanging(value)
				Me.SendPropertyChanging
				Me._Date_Evaluation = value
				Me.SendPropertyChanged("Date_Evaluation")
				Me.OnDate_EvaluationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Enseignant_Evaluation", Storage:="_Enseignant", ThisKey:="Id_Enseignant", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Enseignant() As Enseignant
		Get
			Return Me._Enseignant.Entity
		End Get
		Set
			Dim previousValue As Enseignant = Me._Enseignant.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Enseignant.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Enseignant.Entity = Nothing
					previousValue.Evaluations.Remove(Me)
				End If
				Me._Enseignant.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Evaluations.Add(Me)
					Me._Id_Enseignant = value.Id
				Else
					Me._Id_Enseignant = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Enseignant")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Etudiant_Evaluation", Storage:="_Etudiant", ThisKey:="Id_Etudiant", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Etudiant() As Etudiant
		Get
			Return Me._Etudiant.Entity
		End Get
		Set
			Dim previousValue As Etudiant = Me._Etudiant.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Etudiant.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Etudiant.Entity = Nothing
					previousValue.Evaluations.Remove(Me)
				End If
				Me._Etudiant.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Evaluations.Add(Me)
					Me._Id_Etudiant = value.Id
				Else
					Me._Id_Etudiant = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Etudiant")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Fichier")>  _
Partial Public Class Fichier
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Id_Specialite As Integer
	
	Private _Niveau As Integer
	
	Private _Annee As String
	
	Private _Nom As String
	
	Private _Correction As System.Data.Linq.Binary
	
	Private _Extension As String
	
	Private _Fichier As System.Data.Linq.Binary
	
	Private _Specialite As EntityRef(Of Specialite)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnId_SpecialiteChanging(value As Integer)
    End Sub
    Partial Private Sub OnId_SpecialiteChanged()
    End Sub
    Partial Private Sub OnNiveauChanging(value As Integer)
    End Sub
    Partial Private Sub OnNiveauChanged()
    End Sub
    Partial Private Sub OnAnneeChanging(value As String)
    End Sub
    Partial Private Sub OnAnneeChanged()
    End Sub
    Partial Private Sub OnNomChanging(value As String)
    End Sub
    Partial Private Sub OnNomChanged()
    End Sub
    Partial Private Sub OnCorrectionChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnCorrectionChanged()
    End Sub
    Partial Private Sub OnExtensionChanging(value As String)
    End Sub
    Partial Private Sub OnExtensionChanged()
    End Sub
    Partial Private Sub OnFichierChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnFichierChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Specialite = CType(Nothing, EntityRef(Of Specialite))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id_Specialite", DbType:="Int NOT NULL")>  _
	Public Property Id_Specialite() As Integer
		Get
			Return Me._Id_Specialite
		End Get
		Set
			If ((Me._Id_Specialite = value)  _
						= false) Then
				If Me._Specialite.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnId_SpecialiteChanging(value)
				Me.SendPropertyChanging
				Me._Id_Specialite = value
				Me.SendPropertyChanged("Id_Specialite")
				Me.OnId_SpecialiteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Niveau", DbType:="Int NOT NULL")>  _
	Public Property Niveau() As Integer
		Get
			Return Me._Niveau
		End Get
		Set
			If ((Me._Niveau = value)  _
						= false) Then
				Me.OnNiveauChanging(value)
				Me.SendPropertyChanging
				Me._Niveau = value
				Me.SendPropertyChanged("Niveau")
				Me.OnNiveauChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Annee", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Annee() As String
		Get
			Return Me._Annee
		End Get
		Set
			If (String.Equals(Me._Annee, value) = false) Then
				Me.OnAnneeChanging(value)
				Me.SendPropertyChanging
				Me._Annee = value
				Me.SendPropertyChanged("Annee")
				Me.OnAnneeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nom", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Nom() As String
		Get
			Return Me._Nom
		End Get
		Set
			If (String.Equals(Me._Nom, value) = false) Then
				Me.OnNomChanging(value)
				Me.SendPropertyChanging
				Me._Nom = value
				Me.SendPropertyChanged("Nom")
				Me.OnNomChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Correction", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Correction() As System.Data.Linq.Binary
		Get
			Return Me._Correction
		End Get
		Set
			If (Object.Equals(Me._Correction, value) = false) Then
				Me.OnCorrectionChanging(value)
				Me.SendPropertyChanging
				Me._Correction = value
				Me.SendPropertyChanged("Correction")
				Me.OnCorrectionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Extension", DbType:="NChar(10)")>  _
	Public Property Extension() As String
		Get
			Return Me._Extension
		End Get
		Set
			If (String.Equals(Me._Extension, value) = false) Then
				Me.OnExtensionChanging(value)
				Me.SendPropertyChanging
				Me._Extension = value
				Me.SendPropertyChanged("Extension")
				Me.OnExtensionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fichier", DbType:="Image NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Fichier() As System.Data.Linq.Binary
		Get
			Return Me._Fichier
		End Get
		Set
			If (Object.Equals(Me._Fichier, value) = false) Then
				Me.OnFichierChanging(value)
				Me.SendPropertyChanging
				Me._Fichier = value
				Me.SendPropertyChanged("Fichier")
				Me.OnFichierChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Specialite_Fichier", Storage:="_Specialite", ThisKey:="Id_Specialite", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Specialite() As Specialite
		Get
			Return Me._Specialite.Entity
		End Get
		Set
			Dim previousValue As Specialite = Me._Specialite.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Specialite.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Specialite.Entity = Nothing
					previousValue.Fichiers.Remove(Me)
				End If
				Me._Specialite.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Fichiers.Add(Me)
					Me._Id_Specialite = value.Id
				Else
					Me._Id_Specialite = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Specialite")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Filiere")>  _
Partial Public Class Filiere
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Nom As String
	
	Private _Specialites As EntitySet(Of Specialite)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNomChanging(value As String)
    End Sub
    Partial Private Sub OnNomChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Specialites = New EntitySet(Of Specialite)(AddressOf Me.attach_Specialites, AddressOf Me.detach_Specialites)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nom", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Nom() As String
		Get
			Return Me._Nom
		End Get
		Set
			If (String.Equals(Me._Nom, value) = false) Then
				Me.OnNomChanging(value)
				Me.SendPropertyChanging
				Me._Nom = value
				Me.SendPropertyChanged("Nom")
				Me.OnNomChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Filiere_Specialite", Storage:="_Specialites", ThisKey:="Id", OtherKey:="Id_Filiere")>  _
	Public Property Specialites() As EntitySet(Of Specialite)
		Get
			Return Me._Specialites
		End Get
		Set
			Me._Specialites.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Specialites(ByVal entity As Specialite)
		Me.SendPropertyChanging
		entity.Filiere = Me
	End Sub
	
	Private Sub detach_Specialites(ByVal entity As Specialite)
		Me.SendPropertyChanging
		entity.Filiere = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Matiere")>  _
Partial Public Class Matiere
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Intitule As String
	
	Private _Credit As Integer
	
	Private _Id_Enseignant As Integer
	
	Private _Plan_Cour As System.Data.Linq.Binary
	
	Private _Notes As EntitySet(Of Note)
	
	Private _Enseignant As EntityRef(Of Enseignant)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIntituleChanging(value As String)
    End Sub
    Partial Private Sub OnIntituleChanged()
    End Sub
    Partial Private Sub OnCreditChanging(value As Integer)
    End Sub
    Partial Private Sub OnCreditChanged()
    End Sub
    Partial Private Sub OnId_EnseignantChanging(value As Integer)
    End Sub
    Partial Private Sub OnId_EnseignantChanged()
    End Sub
    Partial Private Sub OnPlan_CourChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnPlan_CourChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Notes = New EntitySet(Of Note)(AddressOf Me.attach_Notes, AddressOf Me.detach_Notes)
		Me._Enseignant = CType(Nothing, EntityRef(Of Enseignant))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Intitule", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Intitule() As String
		Get
			Return Me._Intitule
		End Get
		Set
			If (String.Equals(Me._Intitule, value) = false) Then
				Me.OnIntituleChanging(value)
				Me.SendPropertyChanging
				Me._Intitule = value
				Me.SendPropertyChanged("Intitule")
				Me.OnIntituleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Credit", DbType:="Int NOT NULL")>  _
	Public Property Credit() As Integer
		Get
			Return Me._Credit
		End Get
		Set
			If ((Me._Credit = value)  _
						= false) Then
				Me.OnCreditChanging(value)
				Me.SendPropertyChanging
				Me._Credit = value
				Me.SendPropertyChanged("Credit")
				Me.OnCreditChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id_Enseignant", DbType:="Int NOT NULL")>  _
	Public Property Id_Enseignant() As Integer
		Get
			Return Me._Id_Enseignant
		End Get
		Set
			If ((Me._Id_Enseignant = value)  _
						= false) Then
				If Me._Enseignant.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnId_EnseignantChanging(value)
				Me.SendPropertyChanging
				Me._Id_Enseignant = value
				Me.SendPropertyChanged("Id_Enseignant")
				Me.OnId_EnseignantChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Plan_Cour", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Plan_Cour() As System.Data.Linq.Binary
		Get
			Return Me._Plan_Cour
		End Get
		Set
			If (Object.Equals(Me._Plan_Cour, value) = false) Then
				Me.OnPlan_CourChanging(value)
				Me.SendPropertyChanging
				Me._Plan_Cour = value
				Me.SendPropertyChanged("Plan_Cour")
				Me.OnPlan_CourChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Matiere_Note", Storage:="_Notes", ThisKey:="Id", OtherKey:="Id_Matiere")>  _
	Public Property Notes() As EntitySet(Of Note)
		Get
			Return Me._Notes
		End Get
		Set
			Me._Notes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Enseignant_Matiere", Storage:="_Enseignant", ThisKey:="Id_Enseignant", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Enseignant() As Enseignant
		Get
			Return Me._Enseignant.Entity
		End Get
		Set
			Dim previousValue As Enseignant = Me._Enseignant.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Enseignant.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Enseignant.Entity = Nothing
					previousValue.Matieres.Remove(Me)
				End If
				Me._Enseignant.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Matieres.Add(Me)
					Me._Id_Enseignant = value.Id
				Else
					Me._Id_Enseignant = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Enseignant")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Notes(ByVal entity As Note)
		Me.SendPropertyChanging
		entity.Matiere = Me
	End Sub
	
	Private Sub detach_Notes(ByVal entity As Note)
		Me.SendPropertyChanging
		entity.Matiere = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Note")>  _
Partial Public Class Note
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id_Matiere As Integer
	
	Private _Id_Etudiant As Integer
	
	Private _Trimestre As Integer
	
	Private _CC1 As System.Nullable(Of Double)
	
	Private _CC2 As System.Nullable(Of Double)
	
	Private _Exam As System.Nullable(Of Double)
	
	Private _Etudiant As EntityRef(Of Etudiant)
	
	Private _Matiere As EntityRef(Of Matiere)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnId_MatiereChanging(value As Integer)
    End Sub
    Partial Private Sub OnId_MatiereChanged()
    End Sub
    Partial Private Sub OnId_EtudiantChanging(value As Integer)
    End Sub
    Partial Private Sub OnId_EtudiantChanged()
    End Sub
    Partial Private Sub OnTrimestreChanging(value As Integer)
    End Sub
    Partial Private Sub OnTrimestreChanged()
    End Sub
    Partial Private Sub OnCC1Changing(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnCC1Changed()
    End Sub
    Partial Private Sub OnCC2Changing(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnCC2Changed()
    End Sub
    Partial Private Sub OnExamChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnExamChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Etudiant = CType(Nothing, EntityRef(Of Etudiant))
		Me._Matiere = CType(Nothing, EntityRef(Of Matiere))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id_Matiere", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Id_Matiere() As Integer
		Get
			Return Me._Id_Matiere
		End Get
		Set
			If ((Me._Id_Matiere = value)  _
						= false) Then
				If Me._Matiere.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnId_MatiereChanging(value)
				Me.SendPropertyChanging
				Me._Id_Matiere = value
				Me.SendPropertyChanged("Id_Matiere")
				Me.OnId_MatiereChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id_Etudiant", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Id_Etudiant() As Integer
		Get
			Return Me._Id_Etudiant
		End Get
		Set
			If ((Me._Id_Etudiant = value)  _
						= false) Then
				If Me._Etudiant.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnId_EtudiantChanging(value)
				Me.SendPropertyChanging
				Me._Id_Etudiant = value
				Me.SendPropertyChanged("Id_Etudiant")
				Me.OnId_EtudiantChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Trimestre", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Trimestre() As Integer
		Get
			Return Me._Trimestre
		End Get
		Set
			If ((Me._Trimestre = value)  _
						= false) Then
				Me.OnTrimestreChanging(value)
				Me.SendPropertyChanging
				Me._Trimestre = value
				Me.SendPropertyChanged("Trimestre")
				Me.OnTrimestreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CC1", DbType:="Float")>  _
	Public Property CC1() As System.Nullable(Of Double)
		Get
			Return Me._CC1
		End Get
		Set
			If (Me._CC1.Equals(value) = false) Then
				Me.OnCC1Changing(value)
				Me.SendPropertyChanging
				Me._CC1 = value
				Me.SendPropertyChanged("CC1")
				Me.OnCC1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CC2", DbType:="Float")>  _
	Public Property CC2() As System.Nullable(Of Double)
		Get
			Return Me._CC2
		End Get
		Set
			If (Me._CC2.Equals(value) = false) Then
				Me.OnCC2Changing(value)
				Me.SendPropertyChanging
				Me._CC2 = value
				Me.SendPropertyChanged("CC2")
				Me.OnCC2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Exam", DbType:="Float")>  _
	Public Property Exam() As System.Nullable(Of Double)
		Get
			Return Me._Exam
		End Get
		Set
			If (Me._Exam.Equals(value) = false) Then
				Me.OnExamChanging(value)
				Me.SendPropertyChanging
				Me._Exam = value
				Me.SendPropertyChanged("Exam")
				Me.OnExamChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Etudiant_Note", Storage:="_Etudiant", ThisKey:="Id_Etudiant", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Etudiant() As Etudiant
		Get
			Return Me._Etudiant.Entity
		End Get
		Set
			Dim previousValue As Etudiant = Me._Etudiant.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Etudiant.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Etudiant.Entity = Nothing
					previousValue.Notes.Remove(Me)
				End If
				Me._Etudiant.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Notes.Add(Me)
					Me._Id_Etudiant = value.Id
				Else
					Me._Id_Etudiant = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Etudiant")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Matiere_Note", Storage:="_Matiere", ThisKey:="Id_Matiere", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Matiere() As Matiere
		Get
			Return Me._Matiere.Entity
		End Get
		Set
			Dim previousValue As Matiere = Me._Matiere.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Matiere.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Matiere.Entity = Nothing
					previousValue.Notes.Remove(Me)
				End If
				Me._Matiere.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Notes.Add(Me)
					Me._Id_Matiere = value.Id
				Else
					Me._Id_Matiere = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Matiere")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Personne")>  _
Partial Public Class Personne
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Nom As String
	
	Private _Prenom As String
	
	Private _Situation_Matrimoniale As String
	
	Private _Date_Naissance As Date
	
	Private _Sexe As String
	
	Private _Matricule As String
	
	Private _Email As String
	
	Private _Password As String
	
	Private _Profession As String
	
	Private _Enseignants As EntitySet(Of Enseignant)
	
	Private _Etudiants As EntitySet(Of Etudiant)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNomChanging(value As String)
    End Sub
    Partial Private Sub OnNomChanged()
    End Sub
    Partial Private Sub OnPrenomChanging(value As String)
    End Sub
    Partial Private Sub OnPrenomChanged()
    End Sub
    Partial Private Sub OnSituation_MatrimonialeChanging(value As String)
    End Sub
    Partial Private Sub OnSituation_MatrimonialeChanged()
    End Sub
    Partial Private Sub OnDate_NaissanceChanging(value As Date)
    End Sub
    Partial Private Sub OnDate_NaissanceChanged()
    End Sub
    Partial Private Sub OnSexeChanging(value As String)
    End Sub
    Partial Private Sub OnSexeChanged()
    End Sub
    Partial Private Sub OnMatriculeChanging(value As String)
    End Sub
    Partial Private Sub OnMatriculeChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnProfessionChanging(value As String)
    End Sub
    Partial Private Sub OnProfessionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Enseignants = New EntitySet(Of Enseignant)(AddressOf Me.attach_Enseignants, AddressOf Me.detach_Enseignants)
		Me._Etudiants = New EntitySet(Of Etudiant)(AddressOf Me.attach_Etudiants, AddressOf Me.detach_Etudiants)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nom", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Nom() As String
		Get
			Return Me._Nom
		End Get
		Set
			If (String.Equals(Me._Nom, value) = false) Then
				Me.OnNomChanging(value)
				Me.SendPropertyChanging
				Me._Nom = value
				Me.SendPropertyChanged("Nom")
				Me.OnNomChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Prenom", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Prenom() As String
		Get
			Return Me._Prenom
		End Get
		Set
			If (String.Equals(Me._Prenom, value) = false) Then
				Me.OnPrenomChanging(value)
				Me.SendPropertyChanging
				Me._Prenom = value
				Me.SendPropertyChanged("Prenom")
				Me.OnPrenomChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Situation_Matrimoniale", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Situation_Matrimoniale() As String
		Get
			Return Me._Situation_Matrimoniale
		End Get
		Set
			If (String.Equals(Me._Situation_Matrimoniale, value) = false) Then
				Me.OnSituation_MatrimonialeChanging(value)
				Me.SendPropertyChanging
				Me._Situation_Matrimoniale = value
				Me.SendPropertyChanged("Situation_Matrimoniale")
				Me.OnSituation_MatrimonialeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Date_Naissance", DbType:="DateTime NOT NULL")>  _
	Public Property Date_Naissance() As Date
		Get
			Return Me._Date_Naissance
		End Get
		Set
			If ((Me._Date_Naissance = value)  _
						= false) Then
				Me.OnDate_NaissanceChanging(value)
				Me.SendPropertyChanging
				Me._Date_Naissance = value
				Me.SendPropertyChanged("Date_Naissance")
				Me.OnDate_NaissanceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sexe", DbType:="NChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property Sexe() As String
		Get
			Return Me._Sexe
		End Get
		Set
			If (String.Equals(Me._Sexe, value) = false) Then
				Me.OnSexeChanging(value)
				Me.SendPropertyChanging
				Me._Sexe = value
				Me.SendPropertyChanged("Sexe")
				Me.OnSexeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Matricule", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Matricule() As String
		Get
			Return Me._Matricule
		End Get
		Set
			If (String.Equals(Me._Matricule, value) = false) Then
				Me.OnMatriculeChanging(value)
				Me.SendPropertyChanging
				Me._Matricule = value
				Me.SendPropertyChanged("Matricule")
				Me.OnMatriculeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me.OnPasswordChanging(value)
				Me.SendPropertyChanging
				Me._Password = value
				Me.SendPropertyChanged("Password")
				Me.OnPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Profession", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Profession() As String
		Get
			Return Me._Profession
		End Get
		Set
			If (String.Equals(Me._Profession, value) = false) Then
				Me.OnProfessionChanging(value)
				Me.SendPropertyChanging
				Me._Profession = value
				Me.SendPropertyChanged("Profession")
				Me.OnProfessionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personne_Enseignant", Storage:="_Enseignants", ThisKey:="Id", OtherKey:="Id_Personne")>  _
	Public Property Enseignants() As EntitySet(Of Enseignant)
		Get
			Return Me._Enseignants
		End Get
		Set
			Me._Enseignants.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Personne_Etudiant", Storage:="_Etudiants", ThisKey:="Id", OtherKey:="Id_Personne")>  _
	Public Property Etudiants() As EntitySet(Of Etudiant)
		Get
			Return Me._Etudiants
		End Get
		Set
			Me._Etudiants.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Enseignants(ByVal entity As Enseignant)
		Me.SendPropertyChanging
		entity.Personne = Me
	End Sub
	
	Private Sub detach_Enseignants(ByVal entity As Enseignant)
		Me.SendPropertyChanging
		entity.Personne = Nothing
	End Sub
	
	Private Sub attach_Etudiants(ByVal entity As Etudiant)
		Me.SendPropertyChanging
		entity.Personne = Me
	End Sub
	
	Private Sub detach_Etudiants(ByVal entity As Etudiant)
		Me.SendPropertyChanging
		entity.Personne = Nothing
	End Sub
End Class
